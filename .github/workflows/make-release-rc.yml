# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: fetch tags+chckout release branch
        run: |
          git fetch --tags origin
          git branch release-x.x.x
          git checkout release-x.x.x

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          node-version: '16'

      - name: commit-and-tag-version
        run: |
          npx commit-and-tag-version -a

      - name: Push branch and tag
        run: |
          git push -f origin release-x.x.x
          git push origin v$(cat VERSION.txt)

      - name: Create Pull Request
        uses: actions/github-script@v5
        with:
          script: |
            const branchName = 'release-x.x.x';  // replace with your actual branch name if dynamically generated
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branchName}`
            });
            if (!prs.length) {
              const payload = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Release PR',
                head: branchName,
                base: 'main',
                body: 'This is a release PR. Please check the changes.'
              };
              await github.rest.pulls.create(payload);
            } else {
              console.log('A PR with this branch already exists.');
            }
